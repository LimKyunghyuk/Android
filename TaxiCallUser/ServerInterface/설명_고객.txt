테스트DB안내

DB관리자 주소 : http://mane.nasse.net/phpmyadmin/

DB테이블
1. 고객 테이블 : telco_customer	
2. 평가 테이블 : telco_svc_history
3. 택시 테이블 : telco_taxi_info

모든 데이타는 String으로 관리 됨


< 고객 >  


1. 회원 조회 ( 이미 가입된 회원인지 찾음 )
- 데이터를 넘겨주기 위한 ArrayList가 1개 필요

prmtr.add("http://mane.nasse.net/telco/cst_start.php");
prmtr.add("10");			// 자신의 전화번호
String result = HttpConnect.TagFilter((HttpConnect.postData(prmtr)), "join"); 
// 리턴값 : ok / nok ( 가입할 수 있는 회원 / 이미 가입된 회원 ) 


2. 회원가입
-ing

3. 승객의 위치 등록

prmtr.add("http://mane.nasse.net/telco/cst_loc.php");
prmtr.add("19");			// 자신의 전화번호
prmtr.add("3");				// 자신의 x좌표
prmtr.add("4");				// 자신의 y좌표
String result = HttpConnect.TagFilter((HttpConnect.postData(prmtr)), "location"); 
// 리턴값 : ok / nok ( 성공 / 실패 )



4. call한 택시의 DB에 자신의 전화번호 등록 및 승객의 위치 등록

prmtr.add("http://mane.nasse.net/telco/cst_call.php");
prmtr.add("01099588759");		// 자신의 전화번호
prmtr.add("8");				// 자신의 x좌표
prmtr.add("8");				// 자신의 y좌표
prmtr.add("18");			// call한 택시의 면허번호
String result = HttpConnect.TagFilter((HttpConnect.postData(prmtr)), "call"); 
 


5. 내 주위의 택시 받아오기

- 데이터를 넘기기 위한 ArrayList 1개 필요
- 데이터를 요청할 ArrayList 1개 필요
- 데이터를 받아올 ArrayList 1개 필요

ArrayList<String> prmtr = new ArrayList<String>();
ArrayList<String> tagList = new ArrayList<String>();
ArrayList<TexiData> result = new ArrayList<TexiData>();
		
prmtr.add("http://mane.nasse.net/telco/cst_texi_list.php");
prmtr.add("30");				// 나의 위도
prmtr.add("120");				// 나의 경도
prmtr.add("1");					// 탐색 범위(단위: 10m)
prmtr.add("3");					// 찾을 택시의 최대 수
			
tagList.add("license_number");
tagList.add("car_number");
tagList.add("name");
tagList.add("type");
tagList.add("company");
tagList.add("model");
tagList.add("years");
tagList.add("class");
tagList.add("location_x");
tagList.add("location_y");
tagList.add("status");
tagList.add("customer_number");
			
result = HttpConnect.ListTagFilter(HttpConnect.postData(prmtr), tagList); 
// 리턴값 
result.size();					// 주변 검색된 운전자의 수
result.get(0).license_number;			// 받아온 데이터의 첫번째 운전자의 면허번호
result.get(1).car_number;			// 받아온 데이터의 두번째 운전자의 면허번호




--------------------------------- 추가 및 수정부분 2010.09.12 ---------------------------------------

1. TEXI DB에 '운전자 전화번호' 필드 추가

- 기존 HttpConnect.java를 계속 사용할 시 public static ArrayList<TexiData> ListTagFilter()의 TAGCNT를 13으로 수정해야함
- Class TexiData 수정본으로 교체해야함
- 다음과 같이 API '내 주위의 택시 받아오기' 수정 됨
	5) 내 주위의 택시 받아오기 ( 수정 )
	- 기존 car_number필드와 name필드 사이에 phone_number 필드가 추가되어 전체적인 배열 순서가 한 줄씩 밀림

	ArrayList<String> prmtr = new ArrayList<String>();
	ArrayList<String> tagList = new ArrayList<String>();
	ArrayList<TexiData> result = new ArrayList<TexiData>();
		
	prmtr.add("http://mane.nasse.net/telco/cst_texi_list.php");
	prmtr.add("30");				// 나의 위도
	prmtr.add("120");				// 나의 경도
	prmtr.add("1");					// 탐색 범위(단위: 10m)
	prmtr.add("3");					// 찾을 택시의 최대 수
			
	tagList.add("license_number");
	tagList.add("car_number");
(삽입된부분)tagList.add("phone_number"); 
	tagList.add("name");
	tagList.add("type");
	tagList.add("company");
	tagList.add("model");
	tagList.add("years");
	tagList.add("class");
	tagList.add("location_x");
	tagList.add("location_y");
	tagList.add("status");
	tagList.add("customer_number");
			
	result = HttpConnect.ListTagFilter(HttpConnect.postData(prmtr), tagList); 
// 리턴값 
result.size();					// 주변 검색된 운전자의 수
result.get(0).license_number;			// 받아온 데이터의 첫번째 운전자의 면허번호
result.get(1).car_number;			// 받아온 데이터의 두번째 운전자의 면허번호



2. 연식의 필드가 char(2)에서 char(4)로 수정되었음

3. class필드의 용도가 바뀜 : 자동차운행기간 -> 사용자들이 평가하는 운전자 등급 


4. 회원가입 ( 추가 )

ArrayList<String> prmtr = new ArrayList<String>();
prmtr.add("http://mane.nasse.net/telco/cst_join.php");
prmtr.add("010-9958-8759");		// 자신의 전화번호
prmtr.add("기타");			// 기타
String result = HttpConnect.TagFilter((HttpConnect.postData(prmtr)), "join"); 
// 리턴값 : ok / nok ( 성공 / 실패 ) 			


5. 평가 ( 추가 )

ArrayList<String> prmtr = new ArrayList<String>();
prmtr.add("http://mane.nasse.net/telco/svc_regi.php");
prmtr.add("010-9958-8759");		// 나의 번호
prmtr.add("123");			// 면허번호
prmtr.add("4");				// 평가점수
prmtr.add("싫어요");			// 이용소감
			
String result = HttpConnect.TagFilter((HttpConnect.postData(prmtr)), "estimation"); 
// 리턴값 : ok / nok ( 성공 / 실패 )


6. 고객 좌표 받아오기 ( 추가 : 경석이 사용할 부분 )
ArrayList<String> prmtr = new ArrayList<String>();
ArrayList<String> tagList = new ArrayList<String>();
ArrayList<String> resultList = new ArrayList<String>();
		
			
prmtr.add("http://mane.nasse.net/telco/cst_get_loc.php");
prmtr.add("01037628068");		// 자신의 번호
			
tagList.add("loc_x");
tagList.add("loc_y");
		
resultList = HttpConnect.TagFilter(HttpConnect.postData(prmtr), tagList); 
// 리턴값 
resultList.get(0)			// x_좌표
resultList.get(1)			// y_좌표
	

--------------------------------- 추가 및 수정부분 2010.09.14 ---------------------------------------	

1. 평가 데이터 가져오기 ( 추가 )

- 일단 모든 데이터를 다 가져오지만 사용할 부분은 result.get(i).phone_number, result.get(i).svc_comment, result.get(i).index 3개만 사용되리라 봄
- EstData.java 추가해야 함
- estListTagFilter() 함수가 추가 되었음


ArrayList<String> prmtr = new ArrayList<String>();
ArrayList<String> tagList = new ArrayList<String>();
ArrayList<EstData> result = new ArrayList<EstData>();
				
prmtr.add("http://mane.nasse.net/telco/svc_get_list.php");
prmtr.add("01099588759");				// 운전자의 면허번호
prmtr.add("3");					 	// 받아올 평가 리스트의 수( 데이터가 없다면 그 이하가 될 수  있음 ) 

tagList.add("index");		
tagList.add("phone_number");
tagList.add("license_number");
tagList.add("svc_time");
tagList.add("svc_estimation");
tagList.add("svc_comment");
			
								
result = HttpConnect.estListTagFilter(HttpConnect.postData(prmtr), tagList); 
//리턴값
result.size();				// 받다온 평가의 수
result.get(i).phone_number		// i-1번째 평가의 기록자 전화번호
result.get(i).svc_comment		// i-1번째 평가의 코멘트
null					// 해당 데이터가 없을 경우 ( 반드시 예외처리 필요 )



2. ListTagFilter() 함수에 다음 라인이 추가되었음
- if(0 == items[0].getLength()) return null;
- xml파일에서 아무런 데이타도 나오지 않을시 null이 리턴되는 기능 
- 위 처리를 안하면 데이터가 없을 때 애러 날 수 있음



3.  2010.09.12 추가부분의 5번 평가항목 함수를 사용하게 되면 자동으로 해당 기사의 등급( class )에 평균값이 들어감



4. 평가 테이블 항목 삭제하기 ( 추가 )


ArrayList<String> prmtr = new ArrayList<String>();
prmtr.add("http://mane.nasse.net/telco/svc_del_list_node.php");
prmtr.add("10");		// 삭제할 게시물의 index
			
String result = HttpConnect.TagFilter((HttpConnect.postData(prmtr)), "delete"); 
// // 리턴값 : ok / nok ( 성공 / 실패 )


5. TEXI DB에 '카드 허용' 필드 추가

- 기존 HttpConnect.java를 계속 사용할 시 public static ArrayList<TexiData> ListTagFilter()의 TAGCNT를 14로 수정해야함
- Class TexiData 수정본으로 교체해야함
- 다음과 같이 API '내 주위의 택시 받아오기' 수정 됨
	
	5) 내 주위의 택시 받아오기 ( 수정 )
	- 기존 car_number필드와 name필드 사이에 phone_number 필드가 추가되어 전체적인 배열 순서가 한 줄씩 밀림

	ArrayList<String> prmtr = new ArrayList<String>();
	ArrayList<String> tagList = new ArrayList<String>();
	ArrayList<TexiData> result = new ArrayList<TexiData>();
		
	prmtr.add("http://mane.nasse.net/telco/cst_texi_list.php");
	prmtr.add("30");				// 나의 위도
	prmtr.add("120");				// 나의 경도
	prmtr.add("1");					// 탐색 범위(단위: 10m)
	prmtr.add("3");					// 찾을 택시의 최대 수
			
	tagList.add("license_number");
	tagList.add("car_number");
(2010.09.12 삽입된부분)tagList.add("phone_number"); 
	tagList.add("name");
	tagList.add("type");
	tagList.add("company");
	tagList.add("model");
	tagList.add("years");
(2010.09.14 삽입된부분)tagList.add("card");		// 카드비허용/카드허용 (0/1) 
	tagList.add("class");				// 택시의 평가점수
	tagList.add("location_x");
	tagList.add("location_y");
	tagList.add("status");
	tagList.add("customer_number");
			
	result = HttpConnect.ListTagFilter(HttpConnect.postData(prmtr), tagList); 
	// 리턴값 
	result.size();					// 주변 검색된 운전자의 수
	result.get(0).license_number;			// 받아온 데이터의 첫번째 운전자의 면허번호
	result.get(1).car_number;			// 받아온 데이터의 두번째 운전자의 면허번호
			